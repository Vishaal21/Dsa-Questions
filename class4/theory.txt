## Classes and Objects 
### What is a Class?
A **class** is like a blueprint for creating objects. It defines the structure and behavior (data and methods) that the objects will have.

### What is an Object?
An **object** is an instance of a class. It's like a real-world item created using the class blueprint.

### 🧠 Think of it like this:
- **Class** = Form
- **Object** = Each Student fill their own details in the form.
### ✅ Simple Example:

class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def say_hello(self):
        print(f"Hello, my name is {self.name} and I am {self.age} years old.")

# Create objects
student1 = Student("Alice", 20)
student2 = Student("Bob", 22)

# Call method on objects
student1.say_hello()
student2.say_hello()
### Key Points:
- `__init__` : Special method called when we create an object. Used to initialize the object.
- `self` : Refers to the current object.
- `say_hello` : A method inside the class to print a message.


## 🔹 Reference Variables in Python
### What is a Reference Variable?
A **reference variable** is a variable that holds the **memory address** of an object, not the actual value.

In Python, **everything is an object**, and variables are just **names (or references)** pointing to those objects in memory.

---

### ✅ Simple Example:
a = [1, 2, 3]
b = a  # b is now a reference to the same list object as a

b.append(4)

print(a)  # Output: [1, 2, 3, 4]
print(b)  # Output: [1, 2, 3, 4]
```
### 🔍 Explanation:
- `a`  points to a list `[1, 2, 3]` .
- `b = a`  means both `a`  and `b`  point to the **same list in memory**.
- So when you change `b` , it also changes `a` , because they are **referencing the same object**.
---

### 🧠 Key Concepts:
- **Variables store references**, not actual objects.
- **Multiple variables** can refer to the same object.
---

### ✅ Example with Classes:
```python
class Student:
    def __init__(self, name):
        self.name = name

s1 = Student("Alice")
s2 = s1  # s2 references the same object as s1

s2.name = "Bob"

print(s1.name)  # Output: Bob
print(s2.name)  # Output: Bob
```
### 🧠 What happened?
- `s1`  and `s2`  point to the same object.
- Changing the name via `s2`  also changes it for `s1` .
---

### Summary:
- A **reference variable** points to an object in memory.
- Changing the object through one reference affects all references to it.
---

## 🔗 Linked List in Python (Theory)
### 📌 What is a Linked List?
A **Linked List** is a way to store a collection of elements (data) where each element is called a **node**, and each node **points to the next** node in the list. It forms a **chain-like structure** in memory.

---

### ✅ Why Use a Linked List?
#### 🔄 1. **Dynamic Size**
- Unlike Python lists (which have a fixed-size memory block behind the scenes), linked lists grow or shrink as needed.
- No need to define size in advance.
#### ➕ 2. **Efficient Insertions/Deletions**
- Easy to insert or delete elements, especially at the **beginning** or **middle** of the list.
- No need to shift elements as in Python lists.
---

### 🔍 Real-Life Uses of Linked Lists
- **Music Playlists** – each song points to the next one.
- **Browser History** – "Back" and "Forward" work like nodes in a linked structure.
- **Undo/Redo** – actions are stored in a sequence, like a linked list.
---

## ⚖️ Linked List vs List (Array) in Python
| Feature | Linked List | Python List (Array) |
| ----- | ----- | ----- |
| **Memory allocation** | Dynamic, uses extra memory | Fixed-size blocks, more compact |
| **Insert/Delete (start/middle)** | Fast (just change links) | Slow (elements must be shifted) |
| **Accessing by index** | Slow (must go one-by-one) | Fast (direct access using index) |
| **Memory usage** | More (due to pointers) | Less |
| **Flexibility** | More flexible (no resizing needed) | Less flexible if size changes a lot |
| **Best for** | Frequent insertions/deletions | Fast access/searching by index |
---

## ✅ Summary
- Linked Lists are useful when:
    - You don't know the final size of data.
    - You need frequent insertions and deletions.
    - You're building structures like queues, stacks, or graph adjacency lists.
- Python lists are better when:
    - You need fast access by index.
    - You’re working with a small, fixed-size dataset.


